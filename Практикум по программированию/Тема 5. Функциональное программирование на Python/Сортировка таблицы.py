# Задание 10
# Для списков вида [[‘Иванов’, 3,5,4], [‘Петров’, 4, 5, 5], [‘Сидоров’, 3, 3, 3], [‘Николаев’, 4, 4, 3]] 
# напишите функцию, которая выводит на экран этот список в виде таблицы в отсортированном виде. 
# Параметрами функции являются список, функция, которая определяет порядок сортировки (значение параметра key в sort), и параметр, определяющий, 
# выполняется сортировка по возрастанию или убыванию. 
# Функция не возвращает значение и не изменяет исходный список.
# Используя эту функцию, выведите исходный список, отсортированный:
# по фамилиям в алфавитном порядке;
# в порядке возрастания первой оценки;
# в порядке убывания суммы баллов.

def sort_rules(i, n): # Функция sort_rules принимает список оценок и номер сортировки (1-имя, 2-первая оценка, 3-сумма баллов)
    if n == 1:  # Если номер сортировки 1, то возвращает первый элемент списка (фамилию)
        return i[0] 
    elif n == 2: # Если номер сортировки 2, то возвращает второй элемент списка (первую оценку)
        return i[1]
    elif n == 3: # Если номер сортировки 3, то возвращает сумму всех элементов списка, кроме первого (баллы)
        return sum(i[1:]) 
def sort_list(n): # Функция sort_list принимает номер сортировки и сортирует список list_FIO по заданному правилу
    rev = True if n >= 3 else False # Для этого используется функция sorted с параметром key, который указывает на функцию sort_rules
    for i in sorted(list_FIO, key=lambda x: sort_rules(x, n), reverse=rev): # Параметр reverse задает порядок сортировки (True - по убыванию, False - по возрастанию)
        print(*i)
list_FIO = [['Иванов', 3,5,4], ['Петров', 4, 5, 5], ['Сидоров', 3, 3, 3], ['Николаев', 4, 4, 3]]
n = int(input('по фамилиям в алфавитном порядке (1), в порядке возрастания первой оценки (2), в порядке убывания суммы баллов (3): '))
sort_list(n)
